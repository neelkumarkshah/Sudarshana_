# import argparse
# import json
# import logging
# from pathlib import Path
# from typing import Dict, List, Union
# import requests

# # ===========================
# # Logger Configuration
# # ===========================
# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
# logger = logging.getLogger("HeaderAnalyzer")

# # ===========================
# # Constants
# # ===========================
# VULNERABILITIES_FILE = Path(__file__).parent / "httpHeaders.json"

# # ===========================
# # Type Definitions
# # ===========================
# Headers = Dict[str, str]
# Vulnerability = Dict[str, Union[str, Dict]]

# # ===========================
# # Helper Functions
# # ===========================
# def load_vulnerability_data() -> List[Dict]:
#     """
#     Load vulnerability checklist data from a JSON file.
#     :return: A list of vulnerabilities to check for.
#     """
#     try:
#         with open(VULNERABILITIES_FILE, "r") as file:
#             data = json.load(file)
#             return data.get("Missing HTTP Headers", [])
#     except FileNotFoundError:
#         logger.error(f"Vulnerability checklist file not found: {VULNERABILITIES_FILE}")
#         return []
#     except json.JSONDecodeError as e:
#         logger.error(f"Failed to parse JSON file: {e}")
#         return []

# # ===========================
# # Header Analysis Functions
# # ===========================
# def analyzeCsp(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Content-Security-Policy header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         csp_data = checklist[0]["Content-Security-Policy"]
#         policies = csp_data[0]["Policies"]
#         issue_data = csp_data[0]["Data"]

#         csp_header = headers.get("content-security-policy")

#         logger.info("CSP scan started...")
#         if not csp_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         elif not all(policy in csp_header for policy in policies):
#             vulnerabilities.append({**issue_data[1], "POC": {"content-security-policy": csp_header}})
#         logger.info("CSP scan completed.")
#     except Exception as e:
#         logger.error(f"Error during CSP analysis: {e}")

# def analyzeXContentTypeOptions(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-Content-Type-Options header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xcto_data = checklist[1]["X-Content-Type-Options"]
#         policies = xcto_data[0]["Policies"]
#         issue_data = xcto_data[0]["Data"]

#         xcto_header = headers.get("x-content-type-options")

#         logger.info("XCTO scan started...")
#         if not xcto_header or policies[0] not in xcto_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("XCTO scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XCTO analysis: {e}")

# def analyzeXFrameOptions(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-Frame-Options header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xfo_data = checklist[2]["X-Frame-Options"]
#         policies = xfo_data[0]["Policies"]
#         issue_data = xfo_data[0]["Data"]

#         xfo_header = headers.get("x-frame-options")

#         logger.info("XFO scan started...")
#         if not xfo_header or not any(policy in xfo_header for policy in policies):
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("XFO scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XFO analysis: {e}")

# def analyzeStrictTransportSecurity(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Strict-Transport-Security header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         hsts_data = checklist[3]["HTTP Strict-Transport-Security"]
#         policies = hsts_data[0]["Policies"]
#         issue_data = hsts_data[0]["Data"]

#         hsts_header = headers.get("strict-transport-security")

#         logger.info("HSTS scan started...")
#         if not hsts_header or not all(policy in hsts_header for policy in policies):
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("HSTS scan completed.")
#     except Exception as e:
#         logger.error(f"Error during HSTS analysis: {e}")

# def analyzeXXSSProtection(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-XSS-Protection header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xxss_data = checklist[4]["X-XSS-Protection"]
#         policies = xxss_data[0]["Policies"]
#         issue_data = xxss_data[0]["Data"]

#         xxss_header = headers.get("x-xss-protection")

#         logger.info("XXSS scan started...")
#         if not xxss_header or policies[0] not in xxss_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("XXSS scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XXSS analysis: {e}")

# def analyzeReferrerPolicy(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Referrer-Policy header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         refp_data = checklist[5]["Referrer-Policy"]
#         policies = refp_data[0]["Policies"]
#         issue_data = refp_data[0]["Data"]

#         refp_header = headers.get("referrer-policy")

#         logger.info("Referrer-Policy scan started...")

#         if not refp_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         elif not any(policy in refp_header for policy in policies):
#             vulnerabilities.append({**issue_data[1], "POC": {"referrer-policy": refp_header}})

#         logger.info("Referrer-Policy scan completed.")
#     except Exception as e:
#         logger.error(f"Error during Referrer-Policy analysis: {e}")

# def analyzePermissionsPolicy(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Permissions-Policy header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         pph_data = checklist[6]["Permissions-Policy"]
#         issue_data = pph_data[0]["Data"]

#         pph_header = headers.get("permissions-policy")

#         logger.info("Permissions-Policy scan started...")

#         if not pph_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})

#         logger.info("Permissions-Policy scan completed.")
#     except Exception as e:
#         logger.error(f"Error during Permissions-Policy analysis: {e}")

# def analyzeCORS(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Cross-Origin-Resource-Sharing (CORS) headers.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         cors_data = checklist[7]["Access-Control-Allow-Origin"]
#         policies = cors_data[0]["Policies"]
#         issue_data = cors_data[0]["Data"]

#         cors_header = headers.get("access-control-allow-origin")
#         cors_cred_header = headers.get("access-control-allow-credentials")
#         vary_header = headers.get("vary")
#         origin_header = headers.get("origin")

#         logger.info("CORS scan started...")

#         if not cors_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#             return

#         if "*" in cors_header:
#             vulnerabilities.append({**issue_data[1], "POC": {"access-control-allow-origin": cors_header}})
#             if cors_cred_header:
#                 vulnerabilities.append({**issue_data[2], "POC": headers})

#         if "null" in cors_header:
#             vulnerabilities.append({**issue_data[3], "POC": {"access-control-allow-origin": cors_header}})

#         if origin_header != cors_header and "*" not in cors_header:
#             vulnerabilities.append({**issue_data[4], "POC": headers})

#         if vary_header and "origin" not in vary_header:
#             vulnerabilities.append({**issue_data[5], "POC": {"vary": vary_header}})

#         logger.info("CORS scan completed.")
#     except Exception as e:
#         logger.error(f"Error during CORS analysis: {e}")

# def analyzeCORP(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Cross-Origin-Resource-Policy (CORP) header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         corp_data = checklist[8]["Cross-Origin-Resource-Policy"]
#         policies = corp_data[0]["Policies"]
#         issue_data = corp_data[0]["Data"]

#         corp_header = headers.get("cross-origin-resource-policy")
#         coep_header = headers.get("cross-origin-embedder-policy")

#         logger.info("CORP scan started...")

#         if not corp_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#             return

#         if policies[0] in corp_header:
#             vulnerabilities.append({**issue_data[1], "POC": {"cross-origin-resource-policy": corp_header}})

#         if coep_header and policies[3] in coep_header and policies[0] not in corp_header:
#             vulnerabilities.append({**issue_data[3], "POC": headers})

#         logger.info("CORP scan completed.")
#     except Exception as e:
#         logger.error(f"Error during CORP analysis: {e}")

# def analyzeCOOP(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Cross-Origin-Opener-Policy (COOP) header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         coop_data = checklist[9]["Cross-Origin-Opener-Policy"]
#         policies = coop_data[0]["Policies"]
#         issue_data = coop_data[0]["Data"]

#         coop_header = headers.get("cross-origin-opener-policy")
#         coep_header = headers.get("cross-origin-embedder-policy")

#         logger.info("COOP scan started...")

#         if not coop_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#             return

#         if policies[0] in coop_header:
#             vulnerabilities.append({**issue_data[1], "POC": {"cross-origin-opener-policy": coop_header}})

#         if policies[1] in coop_header and not coep_header:
#             vulnerabilities.append({**issue_data[2], "POC": headers})

#         logger.info("COOP scan completed.")
#     except Exception as e:
#         logger.error(f"Error during COOP analysis: {e}")

# def analyzeCoep(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Cross-Origin-Embedder-Policy header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         coep_data = checklist[10]["Cross-Origin-Embedder-Policy"]
#         policies = coep_data[0]["Policies"]
#         issue_data = coep_data[0]["Data"]

#         coep_header = headers.get("cross-origin-embedder-policy")

#         logger.info("COEP scan started...")
#         if not coep_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         else:
#             if any(policy in coep_header for policy in policies):
#                 for i, policy in enumerate(policies):
#                     if policy == policies[0]:  # Unsafe origin policy
#                         vulnerabilities.append({**issue_data[1], "POC": headers})
#                     if policy == policies[1]:  # Required CORP policy missing
#                         vulnerabilities.append({**issue_data[2], "POC": headers})
#         logger.info("COEP scan completed.")
#     except Exception as e:
#         logger.error(f"Error during COEP analysis: {e}")

# def analyzeServerHeader(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Server header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         server_data = checklist[11]["Server"]
#         issue_data = server_data[0]["Data"]

#         server_header = headers.get("server")

#         logger.info("ServerHeader scan started...")
#         if server_header:
#             server_pattern = r"([a-zA-Z]+)\/([\d.]+)\s?\(([^)]+)\)?"
#             matches_server_data = re.match(server_pattern, server_header)
#             server_name_version_pattern = r"([a-zA-Z]+)\/([\d.]+)"
#             matches_server_name_version = re.match(server_name_version_pattern, server_header)

#             if matches_server_data:
#                 vulnerabilities.append({**issue_data[0], "POC": headers})
#             elif matches_server_name_version:
#                 vulnerabilities.append({**issue_data[1], "POC": headers})
#             else:
#                 vulnerabilities.append({**issue_data[2], "POC": headers})
#         logger.info("ServerHeader scan completed.")
#     except Exception as e:
#         logger.error(f"Error during Server Header analysis: {e}")

# def analyzeXPoweredBy(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-Powered-By header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xpb_data = checklist[12]["X-Powered-By"]
#         issue_data = xpb_data[0]["Data"]

#         x_powered_by_header = headers.get("x-powered-by")

#         logger.info("XPB scan started...")
#         if x_powered_by_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("XPB scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XPB analysis: {e}")

# def analyzeXAspNetVersion(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-AspNet-Version and X-AspNetMvc-Version headers.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xaspnetver_data = checklist[13]["X-AspNet-Version"]
#         issue_data = xaspnetver_data[0]["Data"]

#         x_aspnet_ver_header = headers.get("x-aspnet-version")
#         x_asp_net_mvc_ver_header = headers.get("x-aspnetmvc-version")

#         logger.info("XASPNETVER scan started...")
#         if x_aspnet_ver_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         if x_asp_net_mvc_ver_header:
#             vulnerabilities.append({**issue_data[1], "POC": headers})
#         logger.info("XASPNETVER scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XASPNETVER analysis: {e}")

# def analyzeXDnsPrefetchControl(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the X-DNS-Prefetch-Control header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         xdnspf_data = checklist[14]["X-DNS-Prefetch-Control"]
#         issue_data = xdnspf_data[0]["Data"]

#         xdnspf_header = headers.get("x-dns-prefetch-control")

#         logger.info("XDNSPC scan started...")
#         if xdnspf_header:
#             vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("XDNSPC scan completed.")
#     except Exception as e:
#         logger.error(f"Error during XDNSPC analysis: {e}")

# def analyzeCookies(headers: Headers, checklist: List[Dict], vulnerabilities: List[Vulnerability]) -> None:
#     """
#     Analyze the Cookies header.

#     :param headers: The HTTP headers to analyze.
#     :param checklist: The loaded vulnerability checklist.
#     :param vulnerabilities: A list to store detected vulnerabilities.
#     """
#     try:
#         sc_data = checklist[15]["Cookies"]
#         policies = sc_data[0]["Policies"]
#         issue_data = sc_data[0]["Data"]

#         cookies = headers.get("set-cookie")
#         if cookies and isinstance(cookies, str):
#             cookies = cookies.split("; ")

#         logger.info("SC scan started...")
#         if cookies:
#             for policy in policies:
#                 if policy in cookies:
#                     vulnerabilities.append({**issue_data[0], "POC": headers})
#         logger.info("SC scan completed.")
#     except Exception as e:
#         logger.error(f"Error during SC analysis: {e}")

# # ===========================
# # Main Analysis Function
# # ===========================
# def analyzeHeaders(headers: Headers, url: str) -> List[Vulnerability]:
#     """
#     Perform a complete analysis of the HTTP headers.

#     :param headers: The HTTP headers to analyze.
#     :param url: The URL being tested.
#     :return: A list of detected vulnerabilities.
#     """
#     vulnerabilities = []
#     checklist = load_vulnerability_data()

#     if not checklist:
#         logger.warning("No checklist data available. Skipping analysis.")
#         return vulnerabilities

#     # Individual header analysis functions
#     analyzeCsp(headers, checklist, vulnerabilities)
#     analyzeXContentTypeOptions(headers, checklist, vulnerabilities)
#     analyzeXFrameOptions(headers, checklist, vulnerabilities)
#     analyzeStrictTransportSecurity(headers, checklist, vulnerabilities)
#     analyzeXXSSProtection(headers, checklist, vulnerabilities)
#     analyzeReferrerPolicy(headers, checklist, vulnerabilities)
#     analyzePermissionsPolicy(headers, checklist, vulnerabilities)
#     analyzeCORS(headers, checklist, vulnerabilities)
#     analyzeCORP(headers, checklist, vulnerabilities)
#     analyzeCOOP(headers, checklist, vulnerabilities)
#     analyzeCoep(headers, checklist, vulnerabilities)
#     analyzeServerHeader(headers, checklist, vulnerabilities)
#     analyzeXPoweredBy(headers, checklist, vulnerabilities)
#     analyzeXAspNetVersion(headers, checklist, vulnerabilities)
#     analyzeXDnsPrefetchControl(headers, checklist, vulnerabilities)
#     analyzeCookies(headers, checklist, vulnerabilities)
    
#     return vulnerabilities

# # ===========================
# # Main Script Logic
# # ===========================
# def main() -> None:
#     """
#     Main function to execute the script.
#     """
#     # Argument parser for command-line inputs
#     parser = argparse.ArgumentParser(description="Analyze HTTP headers for security vulnerabilities.")
#     parser.add_argument("--header", type=json.loads, required=True, help="HTTP headers in JSON format")
#     parser.add_argument("--url", type=str, required=True, help="Target URL for the analysis")
#     args = parser.parse_args()

#     # Extract and log inputs
#     headers: Headers = args.header
#     url: str = args.url

#     logger.info(f"Starting analysis for URL: {url}")

#     # Perform the header analysis
#     vulnerabilities = analyzeHeaders(headers, url)

#     # Output the results
#     if vulnerabilities:
#         logger.info("Vulnerabilities detected.")
#         print(json.dumps(vulnerabilities, indent=2))
#     else:
#         logger.info("No vulnerabilities detected.")

# # Entry point for the script
# if __name__ == "__main__":
#     main()