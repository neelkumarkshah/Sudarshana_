{
  "Missing HTTP Headers": [
    {
      "Content-Security-Policy": [
        {
          "Policies": {
            "default-src": "'self'",
            "script-src": "'self'",
            "style-src": "'self'",
            "img-src": "'self'",
            "connect-src": "'self'",
            "font-src": "'self'",
            "frame-src": " 'self'",
            "object-src": "'none'",
            "frame-ancestors": "'none'",
            "base-uri": "'self'",
            "form-action": "'self'",
            "child-src": "'self'",
            "worker-src": "'none'",
            "manifest-src": "'none'",
            "prefetch-src": "'none'"
          },
          "Data": [
            {
              "Vulnerability": "Missing Content-Security-Policy Header",
              "Description": "The absence of the Content-Security-Policy (CSP) header exposes the application to potential attacks like Cross-Site Scripting (XSS), data injection, and Click Jacking. When CSP is not in place, the browser allows all scripts to execute and all resources to load, even from untrusted sources.",
              "Severity": "Low",
              "Remediation": "Enforce a strict Content-Security-Policy header to specify permitted sources for all content types. Begin with a strict policy and adjust to maintain application functionality while prioritizing security.",
              "Refer": [
                "https://content-security-policy.com/ - Content-Security-Policy (CSP) Header Quick Reference",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP - Content Security Policy (CSP) - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Untrusted Content-Security-Policy Configuration",
              "Description": "The existing Content-Security-Policy is either missing essential directives or contains overly permissive values, allowing resources from untrusted sources to be loaded. This misconfiguration can lead to security breaches such as Cross-Site Scripting (XSS), data theft, click jacking and other injection attacks.",
              "Severity": "Low",
              "Remediation": "Revise and enhance the Content-Security-Policy to include all necessary directives with secure and restrictive values. Verify that all origins are reliable and essential for the proper functioning of the application. Avoid using wildcard (*) or data: schemes unless required.",
              "Refer": [
                "https://content-security-policy.com/ - Content-Security-Policy (CSP) Header Quick Reference",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy - Content-Security-Policy - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-Content-Type-Options": [
        {
          "Policies": ["text/html; charset=utf-8", "nosniff"],
          "Data": [
            {
              "Vulnerability": "Improper Content-Type Header Handling",
              "Description": "The Content-Type header is not set correctly, which may expose the application to XSS attacks.",
              "Severity": "Low",
              "Remediation": "Set the Content-Type header correctly and ensure it includes charset. Use 'text/html; charset=UTF-8' for HTML content.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type - Content-Type - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Missing or Incorrect X-Content-Type-Options Header Configuration",
              "Description": "The X-Content-Type-Options header is a security feature that prevents browsers from interpreting files as a different MIME type than what is specified by the server. If this header is missing or incorrectly configured, it can expose the application to MIME-type sniffing attacks. Exploiting this vulnerability, attackers can carry out various attacks, such as Cross-Site Scripting (XSS) and other content injection attacks, by deceiving the browser into interpreting the file as a different type than intended.",
              "Severity": "Low",
              "Remediation": "Ensure the X-Content-Type-Options header is set to `nosniff` in the HTTP response headers. This configuration instructs the browser to strictly follow the MIME type specified by the server and prevents it from interpreting files in any other way.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options - X-Content-Type-Options - HTTP | MDN",
                "https://owasp.org/www-project-secure-headers/#x-content-type-options - OWASP Secure Headers Project | OWASP Foundation",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-Frame-Options": [
        {
          "Policies": ["DENY", "SAMEORIGIN"],
          "Data": [
            {
              "Vulnerability": "Missing or Incorrect X-Frame-Options Header Configuration",
              "Description": "The X-Frame-Options header helps plays a crucial role in preventing clickjacking attacks by determining whether a browser can display a page within a `<frame>`, `<iframe>`, `<embed>`, or `<object>`. If this header is absent or configured incorrectly, it can make the application vulnerable to clickjacking attacks.",
              "Severity": "Medium",
              "Remediation": "Ensure the X-Frame-Options header is configured to either 'DENY' to prevent any domain from framing the content or 'SAMEORIGIN' to allow only pages from the same origin to frame the content.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options - X-Frame-Options - HTTP | MDN",
                "https://owasp.org/www-project-secure-headers/#x-frame-options - OWASP Secure Headers Project | OWASP Foundation",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "HTTP Strict-Transport-Security": [
        {
          "Policies": ["max-age=31536000", "includeSubDomains", "preload"],
          "Data": [
            {
              "Vulnerability": "Missing HTTP to HTTPS redirection",
              "Description": "This vulnerability occurs when a web application does not automatically redirect users from HTTP to HTTPS. This can expose users to risks such as man-in-the-middle (MITM) attacks, where attackers intercept and manipulate data.",
              "Severity": "Medium",
              "Remediation": "Ensure all HTTP requests are redirected to HTTPS. Implement HTTP Strict Transport Security (HSTS) with a long max-age to enforce HTTPS and prevent access via HTTP. Regularly test redirection rules to verify proper implementation.",
              "Refer": [
                "https://hstspreload.org/ - HSTS Preload List Submission",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security - Strict-Transport-Security - HTTP | MDN",
                "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https - Why HTTPS matters | Articles | web.dev"
              ]
            },
            {
              "Vulnerability": "Missing or Incorrect HSTS Header Configuration",
              "Description": "HTTP Strict-Transport-Security (HSTS) is a security mechanism that ensures browsers only connect to a website over HTTPS, even if the user or application attempts to use HTTP. Once a browser receives this header, it will enforce HTTPS for all future requests to the domain, preventing the communication from being downgraded to the less secure HTTP. This mechanism also blocks users from bypassing HTTPS security warnings, such as when a site presents an invalid SSL certificate, mitigating MITM attacks. The absence or incorrect configuration of HSTS exposes the application to several risks, including MITM attacks, protocol downgrade attacks, and click-through SSL warnings.",
              "Severity": "Medium",
              "Remediation": "Ensure that the Strict-Transport-Security header is properly configured with a max-age of at least 31536000 seconds (1 year), includes the includeSubDomains, and preload directive. This instructs the browser to enforce HTTPS for the entire domain and its subdomains, preventing connection downgrades.",
              "Refer": [
                "https://owasp.org/www-project-secure-headers/#http-strict-transport-security - OWASP Secure Headers Project | OWASP Foundation",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security - Strict-Transport-Security - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-XSS-Protection": [
        {
          "Policies": "1; mode=block",
          "Data": [
            {
              "Vulnerability": "Missing or Incorrectly Configured X-XSS-Protection Header",
              "Description": "The X-XSS-Protection header activates the XSS filter in modern web browsers, blocking malicious scripts from user input. Without proper configuration, the application may be vulnerable to unauthorized actions or data theft through XSS attacks.",
              "Severity": "High",
              "Remediation": "To protect against XSS attacks, configure the X-XSS-Protection header in your HTTP response headers as follows: X-XSS-Protection: 1; mode=block. This enables XSS protection, instructing the browser to block the response if it detects any malicious scripts, rather than attempting to sanitize the content. This provides an extra layer of security for your application.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection - X-XSS-Protection - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html - Cross Site Scripting Prevention - OWASP Cheat Sheet Series",
                "https://www.keycdn.com/blog/x-xss-protection - X-XSS-Protection - Preventing Cross-Site Scripting Attacks - KeyCDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "Referrer-Policy": [
        {
          "Policies": ["no-referrer", "strict-origin-when-cross-origin"],
          "Data": [
            {
              "Vulnerability": "Missing Referrer-Policy Header",
              "Description": "The absence of the Referrer-Policy header means that referrer information (sent with the Referer header) is not explicitly controlled. Without this header, referrer data could be sent more liberally than intended, potentially exposing information about the user's browsing behavior and the origins of web requests.",
              "Severity": "Low",
              "Remediation": "Implement the Referrer-Policy header to ensure that referrer information is managed by your security requirements.",
              "Refer": [
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy - Referrer-Policy - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Incorrect Referrer-Policy Header Configuration",
              "Description": "The Referrer-Policy header needs to be properly configured to ensure that sensitive referrer information is shared only as intended.",
              "Severity": "Low",
              "Remediation": "For more stringent control of referrer information, ensure that the directive `no-referrer` or `strict-origin-when-cross-origin` is used for improved privacy and security.",
              "Refer": [
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy - Referrer-Policy - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "Permissions-Policy": [
        {
          "Data": [
            {
              "Vulnerability": "Missing Permissions-Policy Header",
              "Description": "The absence of the Permissions-Policy header means the site does not explicitly control which browser features are accessible, leading to potential security risks like unauthorized access to sensitive features.",
              "Severity": "Low",
              "Remediation": "Ensure that the Permissions-Policy header is implemented with directives that securely restrict access to features. For example, the allowlist for each feature should be set to `self` or explicitly trusted origins.",
              "Refer": [
                "https://www.permissionspolicy.com/ - Permissions Policy HTTP Header Generator",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Permissions_Policy - Permissions Policy - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "Access-Control-Allow-Origin": [
        {
          "Policies": ["*", "null", "Origin"],
          "Data": [
            {
              "Vulnerability": "Missing Cross-Origin-Resource-Sharing Header",
              "Description": "The response does not include the Access-Control-Allow-Origin header. Without proper CORS headers, the server may unintentionally expose resources to untrusted origins. This can result in potential cross-origin attacks, including exposing sensitive data or allowing unauthorized access to resources.",
              "Severity": "High",
              "Remediation": "Ensure that appropriate CORS headers are set for the resources you want to expose and define policies that allow access only from trusted origins.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS - Cross-Origin Resource Sharing (CORS) - HTTP | MDN"
              ],
              "Note": "Please make sure to set the trusted origins."
            },
            {
              "Vulnerability": "Wildcard Origin",
              "Description": "The Access-Control-Allow-Origin header is set to '*', allowing requests from any origin.",
              "Severity": "Medium",
              "Remediation": "Please avoid using '*' as a wildcard in CORS (Cross-Origin Resource Sharing) settings. Instead, set specific origins or implement CORS validation logic on the server for better security.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin - Access-Control-Allow-Origin - HTTP | MDN"
              ],
              "Note": "Please make sure to set the trusted origins."
            },
            {
              "Vulnerability": "Wildcard Origin with Credentials",
              "Description": "The Access-Control-Allow-Origin header is set to '*', allowing any origin to make authenticated requests along with credentials.",
              "Severity": "Medium",
              "Remediation": "Avoid using '*' for credentialed requests. Specify specific origins or implement CORS validation logic on the server.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin - Access-Control-Allow-Origin - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials - Reason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*' - HTTP | MDN"
              ],
              "Note": "Please make sure to set the trusted origins."
            },
            {
              "Vulnerability": "Null Origin Usage",
              "Description": "Access-Control-Allow-Origin is set to 'null', which could expose the site to attacks from non-hierarchical resources such as 'data:' or 'file:'.",
              "Severity": "Medium",
              "Remediation": "It is recommended to refrain from using 'null' in the Access-Control-Allow-Origin header. Instead, explicitly specify trusted origins.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin - Access-Control-Allow-Origin - HTTP | MDN"
              ],
              "Note": "Please make sure to set the trusted origins."
            },
            {
              "Vulnerability": "Invalid CORS Origin",
              "Description": "The specified origin does not have permission to access this resource.",
              "Severity": "Medium",
              "Remediation": "Ensure the Access-Control-Allow-Origin header matches the correct origin or allowed domains.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS - Cross-Origin Resource Sharing (CORS) - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Missing 'Vary: Origin' Header",
              "Description": "Specific Access-Control-Allow-Origin value detected without 'Vary: Origin' header. This can cause improper caching behavior.",
              "Severity": "Low",
              "Remediation": "Make sure to include 'Origin' in the Vary header to prevent caching issues.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary - Vary - HTTP | MDN"
              ],
              "Note": "Please make sure to set the trusted origins."
            }
          ]
        }
      ]
    },
    {
      "Cross-Origin-Resource-Policy": [
        {
          "Policies": [
            "cross-origin",
            "same-site",
            "same-origin",
            "require-corp"
          ],
          "Data": [
            {
              "Vulnerability": "Missing Cross-Origin-Resource-Policy Header",
              "Description": "The absence of the Cross-Origin-Resource-Policy (CORP) header allows cross-origin requests to access the resource, which could expose sensitive data and make the site vulnerable to side-channel attacks.",
              "Severity": "High",
              "Remediation": "Implement the Cross-Origin-Resource-Policy header and specify the appropriate policy value (same-origin, same-site, or cross-origin). The choice of value depends on the sensitivity of the resource and the required access level.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy - Cross-Origin-Resource-Policy - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP - Cross-Origin Resource Policy (CORP) implementation - Security on the web | MDN"
              ]
            },
            {
              "Vulnerability": "Insecure Cross-Origin-Resource-Policy Value",
              "Description": "The Cross-Origin-Resource-Policy header is set to an insecure value (cross-origin) that allows resources to be accessed by any origin. This could expose sensitive information and increase the risk of attacks.",
              "Severity": "Medium",
              "Remediation": "Set the Cross-Origin-Resource-Policy header to a more restrictive value (same-origin or same-site) to limit access to trusted origins or sites.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy - Cross-Origin-Resource-Policy - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP - Cross-Origin Resource Policy (CORP) implementation - Security on the web | MDN"
              ]
            },
            {
              "Vulnerability": "Inappropriate Cross-Origin-Resource-Policy for Sensitive Resources",
              "Description": "The Cross-Origin-Resource-Policy header is set to same-site or cross-origin for resources that handle sensitive user information. This may expose such resources to unauthorized access.",
              "Severity": "Medium",
              "Remediation": "For resources that handle sensitive user information, use Cross-Origin-Resource-Policy: same-origin to restrict access to the same origin only.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy - Cross-Origin-Resource-Policy - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP - Cross-Origin Resource Policy (CORP) implementation - Security on the web | MDN"
              ],
              "Note": "If there are no sensitive resources, the same-site value is acceptable. However, do not specify cross-origin."
            },
            {
              "Vulnerability": "Cross-Origin-Resource-Policy Header Conflict",
              "Description": "If the Cross-Origin-Resource-Policy header conflicts with the Cross-Origin-Embedder-Policy header, it may lead to inconsistent security policies and unintended exposure of resources.",
              "Severity": "Medium",
              "Remediation": "Ensure that Cross-Origin-Resource-Policy is set appropriately and ensure that it aligns with the Cross-Origin-Embedder-Policy if it is being used.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy - Cross-Origin-Resource-Policy - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy - Cross-Origin-Embedder-Policy - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP - Cross-Origin Resource Policy (CORP) implementation - Security on the web | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "Cross-Origin-Opener-Policy": [
        {
          "Policies": ["unsafe-none", "same-origin", "require-corp"],
          "Data": [
            {
              "Vulnerability": "Missing Cross-Origin-Opener-Policy Header",
              "Description": "The Cross-Origin-Opener-Policy (COOP) header is absent, leaving the application vulnerable to XS-Leaks (Cross-Site Leaks) and other cross-origin resource isolation attacks.",
              "Severity": "Medium",
              "Remediation": "Implement the Cross-Origin-Opener-Policy header with the value 'same-origin' to isolate browsing contexts and prevent cross-origin attacks.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy - Cross-Origin-Opener-Policy - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Insecure Cross-Origin-Opener-Policy Value (unsafe-none)",
              "Description": "The Cross-Origin-Opener-Policy header is set to unsafe-none, allowing the document to share a browsing context with cross-origin documents. This can result in XS-Leaks and information leakage across origins.",
              "Severity": "Medium",
              "Remediation": "Set the Cross-Origin-Opener-Policy header to same-origin to isolate the browsing context.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy - Cross-Origin-Opener-Policy - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Inconsistent COOP and COEP Headers",
              "Description": "The Cross-Origin-Opener-Policy and Cross-Origin-Embedder-Policy headers should be aligned. If COOP is set to same-origin and COEP is not set or is incorrectly configured, it can lead to incomplete isolation of resources.",
              "Severity": "Medium",
              "Remediation": "Ensure the Cross-Origin-Opener-Policy header is set to same-origin, and the Cross-Origin-Embedder-Policy is set to require-corp to enforce complete isolation.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy - Cross-Origin-Opener-Policy - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "Cross-Origin-Embedder-Policy": [
        {
          "Policies": ["unsafe-none", "require-corp"],
          "Data": [
            {
              "Vulnerability": "Missing Cross-Origin-Embedder-Policy Header",
              "Description": "The COEP header is absent, allowing the document to embed resources from any origin without requiring explicit permission via CORS or CORP, potentially exposing the application to cross-origin attacks.",
              "Severity": "Medium",
              "Remediation": "Implement the Cross-Origin-Embedder-Policy header with a value of require-corp to restrict the document to load only same-origin or explicitly permitted cross-origin resources.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy - Cross-Origin-Embedder-Policy - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Insecure Cross-Origin-Embedder-Policy Value (unsafe-none)",
              "Description": "The COEP header is set to unsafe-none, allowing the document to load cross-origin resources without explicit permission. This may lead to security risks where unauthorized resources can be embedded.",
              "Severity": "Medium",
              "Remediation": "Set the Cross-Origin-Embedder-Policy header to require-corp or credentialless to ensure that resources are loaded securely.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy - Cross-Origin-Embedder-Policy - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "COEP is not set to require-corp",
              "Description": "The Cross-Origin-Embedder-Policy header is not configured to require-corp. As a result, the document may include cross-origin resources without explicit permission, potentially causing security risks.",
              "Severity": "Medium",
              "Remediation": "Ensure that the Cross-Origin-Embedder-Policy is configured to require-corp to prohibit unauthorised embedding of cross-origin resources.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy - Cross-Origin-Embedder-Policy - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "Server": [
        {
          "Data": [
            {
              "Vulnerability": "Exposed Server Header Information (Server, Version, OS)",
              "Description": "The Server header includes specific information such as the server's name, version, and operating system. This information can aid attackers in discovering and exploiting known vulnerabilities related to this configuration.",
              "Severity": "Medium",
              "Remediation": "Remove the Server header or replace it with something generic, such as 'Server: webserver'. Do not disclose server information.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server - Server - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Exposed Server Header Information (Server and Version)",
              "Description": "The Server header reveals the server's name and version. This may enable attackers to identify specific vulnerabilities in this version.",
              "Severity": "Low",
              "Remediation": "Remove the Server header or replace it with something generic, such as 'Server: webserver'. Do not disclose server information.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server - Server - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Exposed Server Header Information (Server Name Only)",
              "Description": "The Server header reveals the server's name. While it is less critical than revealing the version or OS, keeping the server software name private is still a good practice.",
              "Severity": "Low",
              "Remediation": "Remove the Server header or replace it with something generic, such as 'Server: webserver'. Do not disclose server information.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server - Server - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-Powered-By": [
        {
          "Data": [
            {
              "Vulnerability": "Information Leakage via X-Powered-By Header",
              "Description": "The X-Powered-By HTTP response header, which is exposed by the web/application server, discloses the underlying technologies that the server is using (e.g., PHP, ASP.NET, Express and etc.). This information can help attackers identify specific frameworks and associated vulnerabilities.",
              "Severity": "Low",
              "Remediation": "Configure your web server, application server, or load balancer to suppress or remove the X-Powered-By header. This reduces the risk of attackers gaining information about the tech stack that may aid them in finding potential vulnerabilities.",
              "Refer": [
                "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework - WSTG - v4.2 | OWASP Foundation",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-AspNet-Version": [
        {
          "Data": [
            {
              "Vulnerability": "ASP.NET Version Disclosure via X-AspNet-Version Header",
              "Description": "The web application exposes the X-AspNet-Version HTTP response header, revealing the ASP.NET version in use. Attackers may be able to utilize this information to find vulnerabilities or exploits that specifically target particular versions of ASP.NET. It is unnecessary for production environments and should be disabled.",
              "Severity": "Low",
              "Remediation": "To prevent ASP.NET version disclosure, disable the header by adding the following to the 'web.config' file: <system.web><httpRuntime enableVersionHeader='false' /></system.web>.",
              "Refer": [
                "https://learn.microsoft.com/en-us/dotnet/api/system.web.configuration.httpruntimesection.enableversionheader?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Configuration_HttpRuntimeSection_EnableVersionHeader - HttpRuntimeSection.EnableVersionHeader Property (System.Web.Configuration) | Microsoft Learn",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series",
                "https://www.acunetix.com/vulnerabilities/web/version-disclosure-asp-net/ - Version Disclosure (ASP.NET) - Vulnerabilities - Acunetix"
              ]
            },
            {
              "Vulnerability": "ASP.NET MVC Version Disclosure via X-AspNetMvc-Version Header",
              "Description": "The X-AspNetMvc-Version header reveals the version of ASP.NET MVC in use. This header is not necessary for production environments and can potentially attackers determine the exact framework version being utilized.",
              "Severity": "Low",
              "Remediation": "To prevent exposing the ASP.NET MVC version, disable the X-AspNetMvc-Version header by including the following code 'MvcHandler.DisableMvcResponseHeader = true;' in the Global.asax file",
              "Refer": [
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series",
                "https://www.acunetix.com/vulnerabilities/web/version-disclosure-asp-net-mvc/ - Version Disclosure (ASP.NET MVC) - Vulnerabilities - Acunetix"
              ]
            }
          ]
        }
      ]
    },
    {
      "X-DNS-Prefetch-Control": [
        {
          "Data": [
            {
              "Vulnerability": "DNS Prefetching Disclosure via X-DNS-Prefetch-Control Header",
              "Description": "The X-DNS-Prefetch-Control header controls DNS prefetching, which allows browsers to proactively resolve domain names for links and referenced resources before the user interacts with them. This function should be turned off, If you do not control the links on your site or wish to avoid leaking information to these domains, this feature should be disabled.",
              "Severity": "Low",
              "Remediation": "Set the X-DNS-Prefetch-Control header to 'off' to disable DNS prefetching. This helps prevent potential leakage of information to domains you do not control.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control - X-DNS-Prefetch-Control - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            }
          ]
        }
      ]
    },
    {
      "Cookies": [
        {
          "Policies": [
            "__Secure-",
            "__Host-",
            "Secure",
            "HttpOnly",
            "SameSite=Lax",
            "SameSite=Strict",
            "Expires",
            "Max-Age",
            "Domain",
            "Path"
          ],
          "Data": [
            {
              "Vulnerability": "Insecure Cookie Name",
              "Description": "The cookies being used do not have the recommended security prefixes, making them susceptible to being overwritten by untrusted sources. Using the __Secure- or __Host- prefixes enhances security by ensuring that cookies are delivered only over secure channels (HTTPS) and are protected from potential attacks, such as cross-site scripting (XSS) or session hijacking.",
              "Severity": "High",
              "Remediation": "Prefix cookies with __Secure- for HTTPS connections and __Host- for stricter security, ensuring cookies are tied to the root domain and inaccessible to insecure origins.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Missing Secure Attribute",
              "Description": "Session cookies lacking the Secure attribute are vulnerable to interception, as they can be transmitted over unencrypted HTTP connections. This exposes sensitive session data, allowing potential attackers to hijack the session. By restricting cookies to HTTPS only, you ensure they are transmitted over secure channels, significantly reducing the risk of session compromise.",
              "Severity": "High",
              "Remediation": "Ensure that all session cookies are configured with the Secure attribute, which will restrict them to secure HTTPS connections. This can be done by setting the 'Secure' flag when creating or managing cookies in your application.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Missing HttpOnly Attribute",
              "Description": "Cookies without the HttpOnly attribute can be accessed via client-side scripts, which exposes them to cross-site scripting (XSS) attacks. Attackers can potentially steal these cookies and gain unauthorized access to a user's session. Implementing HttpOnly prevents access to cookies through JavaScript, enhancing protection against XSS-based session hijacking.",
              "Severity": "High",
              "Remediation": "Apply the HttpOnly attribute to all session cookies to prevent them from being accessed by client-side scripts. This is done by setting the 'HttpOnly' flag in your cookie configuration, ensuring enhanced security by mitigating the risk of XSS.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Missing SameSite Attribute",
              "Description": "Cookies without a defined SameSite attribute are more susceptible to Cross-Site Request Forgery (CSRF) attacks. CSRF occurs when unauthorized commands are transmitted from a user's browser without their knowledge. Setting the SameSite attribute controls whether cookie  s should be sent with cross-site requests, reducing the risk of CSRF attacks.",
              "Severity": "Medium",
              "Remediation": "Ensure that the SameSite attribute is set for all session cookies, ideally with a value of 'Lax' or 'Strict'. This ensures cookies are only sent with requests originating from the same site, reducing the risk of cross-origin attacks.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html - HTTP Headers - OWASP Cheat Sheet Series"
              ]
            },
            {
              "Vulnerability": "Missing or Expired Cookie",
              "Description": "Session cookies without a proper expiration time may persist longer than necessary, increasing the risk of session hijacking or unauthorized access. Furthermore, expired cookies can disrupt user sessions, causing unexpected logouts or errors. Properly managing cookie expiration ensures timely session management and minimizes security risks.",
              "Severity": "Medium",
              "Remediation": "Set an explicit expiration time for all session cookies, ensuring that cookies are only valid for an appropriate duration. This can be achieved by setting the 'Expires' or 'Max-Age' attribute in the cookie configuration.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie - Set-Cookie - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Overly Broad Domain",
              "Description": "Cookies should only include a Domain attribute when necessary and should be restricted to the most specific domain possible to minimize exposure.",
              "Severity": "Medium",
              "Remediation": "Configure the Domain attribute for cookies to the most specific domain required for proper functionality, ensuring minimal scope.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie - Set-Cookie - HTTP | MDN"
              ]
            },
            {
              "Vulnerability": "Overly Broad Path",
              "Description": "Cookies should be configured with the most restrictive Path attribute necessary to limit their scope and prevent unnecessary access.",
              "Severity": "Medium",
              "Remediation": "Ensure the Path attribute for cookies is set to the most specific path required, reducing the potential risk of misuse.",
              "Refer": [
                "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies - Secure cookie configuration - Security on the web | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies - Using HTTP cookies - HTTP | MDN",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie - Set-Cookie - HTTP | MDN"
              ]
            }
          ]
        }
      ]
    },
    {
      "SSL/TLS Check": [
        {
          "Data": [
            {
              "Vulnerability": "Weak Cipher Suite",
              "Description": "Weak cipher suites are encryption algorithms that are no longer considered secure. They can be exploited by attackers to decrypt or tamper with data in transit. Using weak cipher suites makes it easier for attackers to perform man-in-the-middle attacks or decrypt sensitive data.",
              "Severity": "High",
              "Remediation": "Disable weak cipher suites and ensure that only strong, up-to-date encryption algorithms are enabled. Common weak cipher suites include those using DES or RC4. Refer to the latest guidelines for cipher suite recommendations and configure your server to use only strong cipher suites.",
              "Refer": [
                "https://www.ssllabs.com/ssl-pulsar/",
                "https://ciphersuite.info/"
              ]
            },
            {
              "Vulnerability": "Expired or Invalid SSL/TLS Certificate",
              "Description": "An expired or invalid SSL/TLS certificate can compromise the security of encrypted communications. Expired certificates can cause browsers to display warnings, and invalid certificates may not properly establish trust with clients.",
              "Severity": "High",
              "Remediation": "Regularly monitor and renew SSL/TLS certificates before they expire. Ensure that certificates are properly issued by a trusted Certificate Authority (CA) and verify their validity using online tools or certificate management systems.",
              "Refer": [
                "https://www.digicert.com/help/",
                "https://www.sslshopper.com/"
              ]
            },
            {
              "Vulnerability": "Insecure SSL/TLS Protocol Version",
              "Description": "Using outdated or insecure SSL/TLS protocol versions can expose your server to vulnerabilities. Protocols like SSLv2 and SSLv3 are considered obsolete and have known security flaws. Modern TLS versions should be used to ensure the security of data in transit.",
              "Severity": "High",
              "Remediation": "Disable outdated SSL/TLS protocol versions and configure your server to support only secure versions such as TLS 1.2 or TLS 1.3. Regularly update your server and client configurations to adhere to current security best practices.",
              "Refer": [
                "https://tls.x509labs.com/",
                "https://www.owasp.org/index.php/Transport_Layer_Security"
              ]
            }
          ]
        }
      ]
    }
  ]
}
