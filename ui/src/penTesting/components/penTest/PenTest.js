import React, { useState, useEffect } from "react";
import { Row, Col, Alert } from "react-bootstrap";

import PenTestForm from "../pentestForm/PentestForm";
import Result from "../result/Result";

const PenTest = () => {
  const [scanResult, setScanResult] = useState(null);
  const [formEnabled, setFormEnabled] = useState(true);
  const [scanStarted, setScanStarted] = useState(false);
  const [allIssuesRendered, setAllIssuesRendered] = useState(false);
  const [newScan, setNewScan] = useState(0);
  const [message, setMessage] = useState({ type: "", text: "" });

  useEffect(() => {
    if (message.text) {
      const timer = setTimeout(() => setMessage({ type: "", text: "" }), 5000);
      return () => clearTimeout(timer);
    }
  }, [message]);

  const handleScanResult = (result) => {
    setScanResult(result);

    if (result?.error) {
      setMessage({ type: "danger", text: result.error });
    }
  };

  const handleStartScan = () => {
    setFormEnabled(false);
    setScanStarted(true);
    setAllIssuesRendered(false);
    setMessage({ type: "info", text: "Scan has started..." });
  };

  const resetAll = () => {
    setScanResult(null);
    setFormEnabled(true);
    setNewScan((prev) => prev + 1);
    setScanStarted(false);
    setAllIssuesRendered(false);
    setMessage({ type: "info", text: "Ready for a new scan." });
  };

  const textColorClass = {
    danger: "text-danger",
    success: "text-success",
    info: "text-info",
    warning: "text-warning",
  };

  return (
    <Row>
      <Col sm={12}>
        <PenTestForm
          key={newScan}
          onScanResult={handleScanResult}
          formEnabled={formEnabled}
          handleStartScan={handleStartScan}
          resetAll={resetAll}
          scanStarted={scanStarted}
          allIssuesRendered={allIssuesRendered}
          setMessage={setMessage}
        />
      </Col>

      <Col sm={12}>
        {message.text && (
          <Alert
            variant={message.type}
            className={`text-center ${textColorClass[message.type] || ""}`}
          >
            {message.text}
          </Alert>
        )}
      </Col>

      {scanResult && (
        <Col sm={12}>
          <Result
            scanResult={scanResult}
            onAllIssuesRendered={() => setAllIssuesRendered(true)}
            setMessage={setMessage}
          />
        </Col>
      )}
    </Row>
  );
};

export default PenTest;
