import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { useEffect, useState } from "react";
import logo from "../../../shared/assets/images/sudarshanaLogo.png";

function PdfViewer() {
  const [pdfUrl, setPdfUrl] = useState(null);

  const generatePDF = () => {
    const doc = new jsPDF();
    const pageNumbers = []; // Array to store page numbers

    const createTitlePage = () => {
      doc.setFillColor("#ffffff");
      doc.rect(
        0,
        0,
        doc.internal.pageSize.width,
        doc.internal.pageSize.height,
        "F"
      );

      const logoWidth = 120;
      const logoHeight = 16;
      const pageWidth = doc.internal.pageSize.width;
      const horizontallyCenter = (pageWidth - logoWidth) / 2;

      doc.addImage(logo, "PNG", horizontallyCenter, 40, logoWidth, logoHeight);

      const firstRectWidth = 140;
      const firstRectX = (pageWidth - firstRectWidth) / 2;
      doc.setFillColor("#f4f4f4");
      doc.roundedRect(firstRectX - 5, 150, firstRectWidth, 50, 5, 5, "F");

      const secondRectWidth = 140;
      const secondRectX = (pageWidth - secondRectWidth) / 2;
      doc.setFillColor("#1c3144");
      doc.roundedRect(secondRectX + 5, 160, secondRectWidth, 50, 5, 5, "F");

      doc.setFont("times", "bold");
      doc.setFontSize(20);
      doc.setTextColor("#f4f4f4");
      doc.text("Security Assessment Report", secondRectX + 135, 170, {
        align: "right",
      });

      doc.setFont("times", "italic");
      doc.setFontSize(14);
      doc.text("Automated Scan & Manual Testing", secondRectX + 135, 180, {
        align: "right",
      });

      const options = { day: "2-digit", month: "short", year: "numeric" };
      const formattedDate = new Date().toLocaleDateString("en-IN", options);
      doc.setFont("times", "bold");
      doc.setFontSize(12);
      doc.setTextColor("#f4f4f4");
      doc.text(`${formattedDate}`, secondRectX + 135, 205, { align: "right" });

      // Store page number for the title page
      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createTableOfContentsPage = () => {
      doc.addPage();
      header();

      doc.setFont("times", "bold");
      doc.setFontSize(20);
      doc.setTextColor("#1c3144");
      doc.text("Table of Contents", 20, 30);

      doc.setFont("times", "normal");
      doc.setFontSize(12);
      doc.text("1. Main Title Page", 20, 50);
      doc.text("2. Table of Contents", 20, 60);
      doc.text("3. Executive Summary", 20, 70);
      doc.text("4. Identified Vulnerabilities", 20, 80);
      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createSummaryPage = () => {
      const pageWidth = doc.internal.pageSize.width;
      const margin = 10;
      let dynamicYPosition = 25;

      doc.addPage();
      header();

      const containerWidth = pageWidth - margin * 2;
      // const containerHeight = 60;
      // doc.setDrawColor("#1c3144");
      // doc.setLineWidth(0.5);
      // doc.roundedRect(
      //   margin,
      //   dynamicYPosition,
      //   containerWidth,
      //   containerHeight,
      //   6,
      //   6
      // );

      doc.setFillColor("#1c3144");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");

      // Title text
      doc.setTextColor("#ffffff");
      doc.setFont("times", "bold");
      doc.setFontSize(16);
      doc.text("Overall Summary", pageWidth / 2, dynamicYPosition + 8, {
        align: "center",
      });

      dynamicYPosition += 25;

      // Assessment Details
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Assessment Details", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 10;

      const headerStyles = {
        font: "times",
        fontStyle: "bold",
        fillColor: "#1c3144",
        fontSize: 12,
        halign: "center",
        valign: "middle",
      };

      const bodyStyles = {
        font: "times",
        fontSize: 12,
        halign: "center",
        valign: "middle",
      };

      const scopeData = [
        {
          "Web Application": "Web Application",
          "Demo App": "Demo App",
          "https://demoapp.com": "https://demoapp.com",
        },
      ];

      autoTable(doc, {
        head: [["Type of Scan", "Name of Application", "URL"]],
        body: scopeData.map((item) => [
          item.scanType,
          item.applicationName,
          item.url,
        ]),
        startY: dynamicYPosition,
        headStyles: headerStyles,
        styles: bodyStyles,
        theme: "striped",
      });

      dynamicYPosition = doc.lastAutoTable.finalY + 15;

      // Assessment Methodologies
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Assessment Methodologies", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 10;

      const methodology = ["Web Application Security Assessment"];
      const lineSpacing = 7;

      // Purpose
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(12);
      doc.setTextColor("#1c3144");
      doc.text("Purpose", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const purposeLines = doc.splitTextToSize(
        methodology.purpose,
        pageWidth - 2 * margin
      );
      doc.text(purposeLines, margin, dynamicYPosition);
      dynamicYPosition += purposeLines.length * lineSpacing + 5;

      // Scope
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setTextColor("#1c3144");
      doc.text("Scope", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const projectScopeLines = doc.splitTextToSize(
        methodology.scope,
        pageWidth - 2 * margin
      );
      doc.text(projectScopeLines, margin, dynamicYPosition);
      dynamicYPosition += projectScopeLines.length * lineSpacing + 5;

      // Methodologies
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setTextColor("#1c3144");
      doc.text("Methodologies", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const methodologiesLines = doc.splitTextToSize(
        methodology.methodologies,
        pageWidth - 2 * margin
      );
      doc.text(methodologiesLines, margin, dynamicYPosition);
      dynamicYPosition += methodologiesLines.length * lineSpacing + 15;

      // Threats Summary
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Threats Summary", margin, dynamicYPosition, {
        align: "center",
      });

      const severityTableHeaders = [
        "Severity",
        "Critical",
        "High",
        "Medium",
        "Low",
        "Info",
        "Errors",
      ];
      const severityCounts = severityTableHeaders.reduce((acc, s) => {
        acc[s] = 0;
        return acc;
      }, {});

      // scanResult?.scan?.issues.forEach((issue) => {
      //   severityCounts[issue.Severity] =
      //     (severityCounts[issue.Severity] || 0) + 1;
      // });

      const totalIssues = 50;

      const severityHeaderRow = severityTableHeaders
        .concat(["Total Issues"])
        .map((header) => ({
          content: header,
          styles: { textColor: "#FFFFFF", fillColor: "#1c3144" },
        }));

      const severityStyles = {
        Critical: "#B80000",
        High: "#FF1F1F",
        Medium: "#EB701E",
        Low: "#FFDD33",
        Info: "#7AB851",
        Errors: "#860909",
      };

      const severityCountRow = severityTableHeaders.map((severity) => ({
        content:
          severity === "Severity"
            ? "Number of Threats"
            : severityCounts[severity],
        styles: {
          textColor:
            severity === "Severity"
              ? "#1c3144"
              : severityStyles[severity] || "#1c3144",
        },
      }));

      severityCountRow.push({
        content: totalIssues,
        styles: { textColor: "#1c3144" },
      });

      autoTable(doc, {
        head: [severityHeaderRow],
        body: [severityCountRow],
        startY: dynamicYPosition + 5,
        headStyles: headerStyles,
        styles: bodyStyles,
      });

      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createIdentifiedIssuesPages = () => {
      for (let i = 0; i < 3; i++) {
        doc.addPage();
        header();

        doc.setFont("times", "bold");
        doc.setFontSize(16);
        doc.text(`Issue ${i + 1}`, 20, 30);

        doc.setFont("times", "normal");
        doc.setFontSize(12);
        doc.text(
          `Description: Vulnerability ${i + 1} description goes here.`,
          20,
          50
        );
        doc.text(`Severity: High`, 20, 60);
        doc.text(
          `Remediation: Steps to resolve vulnerability ${i + 1}.`,
          20,
          70
        );

        pageNumbers.push(doc.internal.getNumberOfPages());
      }
    };

    const header = () => {
      doc.setFillColor("#f4f4f4");
      doc.rect(0, 0, doc.internal.pageSize.width, 20, "F");
      const logoWidth = 55;
      const logoHeight = 7.5;
      const x = (doc.internal.pageSize.width - logoWidth) / 2;
      doc.addImage(logo, "PNG", x, 6.6, logoWidth, logoHeight);
    };

    const footer = (pageNumber) => {
      // Skip footer on the title page
      if (pageNumber === 1) return;

      doc.setFillColor("#f4f4f4");
      doc.setTextColor("#1c3144");
      doc.rect(
        0,
        doc.internal.pageSize.height - 20,
        doc.internal.pageSize.width,
        20,
        "F"
      );

      const totalPages = doc.internal.getNumberOfPages();
      const pageText = `Page ${pageNumber} of ${totalPages}`;

      const textWidth = doc.getTextWidth(pageText);
      const x = doc.internal.pageSize.width - textWidth - 10;

      doc.setFontSize(10);
      const y = doc.internal.pageSize.height - 8.5;
      doc.text(pageText, x, y);
    };

    createTitlePage();
    createTableOfContentsPage();
    createSummaryPage();
    createIdentifiedIssuesPages();

    // After all pages have been added, update the footers
    for (let i = 0; i < pageNumbers.length; i++) {
      doc.setPage(pageNumbers[i]); // Move to the correct page
      footer(pageNumbers[i]); // Set footer for each page based on stored page numbers
    }

    // Generate and display the PDF
    const blob = doc.output("blob");
    const pdfUrl = URL.createObjectURL(blob);
    setPdfUrl(pdfUrl);
  };

  useEffect(() => {
    generatePDF();
  }, []);

  return (
    <div>
      {pdfUrl && (
        <iframe src={pdfUrl} title="PDF Viewer" width="100%" height="900px" />
      )}
    </div>
  );
}

export default PdfViewer;
