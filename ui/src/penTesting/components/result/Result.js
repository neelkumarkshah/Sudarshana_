import React, { useState, useEffect, useCallback, useMemo } from "react";
import { Row, Col, Alert, Accordion, Spinner } from "react-bootstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFilePdf } from "@fortawesome/free-solid-svg-icons";

import PDFGeneration from "./PDF";
import CardBox from "../../../shared/components/uiElements/card/Card";
import ModalOverlay from "../../../shared/components/uiElements/modalOverlay/ModalOverlay";
import ButtonLayout from "../../../shared/components/uiElements/button/Button";
import classes from "./Result.module.css";
import { useAuth } from "../../../shared/hooks/auth-hook";

const cssOverride = `
    .accordion-button {
      border: 1px solid #dee2e6 !important;
      border-radius: 0.4rem !important;
      color: #1c3144 !important;
      font-weight: 600 !important;
    }

    .accordion-button:not(.collapsed) {
      color: #1c3144 !important;
      background-color: #ffffff !important;
      border: 1px solid #1c3144 !important;
      border-bottom-right-radius: 0 !important;
      border-bottom-left-radius: 0 !important;
      box-shadow: none !important;
    }

    p {
      color: #1c3144;
      text-align: justify;
    }

    a {
      color: #20a4f3;
    }

    a:hover, a:active, a:focus {
      color: #1c3144;
    }
  `;

const Result = ({ scanResult, onAllIssuesRendered }) => {
  const severityStyles = {
    Critical: "#B80000",
    High: "#FF1F1F",
    Medium: "#EB701E",
    Low: "#FFDD33",
    Info: "#7AB851",
    Errors: "#860909",
  };

  const [renderedIssues, setRenderedIssues] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(-1);
  const [loading, setLoading] = useState(true);
  const [isPDFGenerated, setIsPDFGenerated] = useState(false);
  const [showOverlay, setShowOverlay] = useState(false);
  const [pdfBlob, setPdfBlob] = useState(null);
  const [pdfName, setPdfName] = useState("");
  const [pdfError, setPdfError] = useState("");
  const [allIssuesRendered, setAllIssuesRendered] = useState(false);
  const [modalMessage, setModalMessage] = useState(
    "We are generating your PDF report, please wait..."
  );

  const totalIssues = scanResult?.scan?.issues?.length || 0;

  const { token } = useAuth();

  const uploadPDF = useCallback(
    async (pdfBlob) => {
      const arrayBuffer = await pdfBlob.arrayBuffer();

      try {
        const response = await window.api.invoke("uploadPDF", {
          scanId: scanResult?.scan?.scanId,
          pdfBuffer: arrayBuffer,
          pdfName: `${scanResult?.scan?.applicationName}_Security_Assessment_Report.pdf`,
          token,
        });

        if (!response.success) {
          throw new Error(response.message || "Failed to upload PDF");
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    [scanResult, token]
  );

  useEffect(() => {
    if (currentIndex >= 0 && currentIndex < totalIssues) {
      const issue = scanResult.scan.issues[currentIndex];

      setRenderedIssues((prevIssues) => [...prevIssues, issue]);

      const delay = setTimeout(() => {
        setCurrentIndex((prevIndex) => prevIndex + 1);
      }, 2000);

      return () => clearTimeout(delay);
    } else if (currentIndex >= totalIssues) {
      setLoading(false);
      setAllIssuesRendered(true);

      if (typeof onAllIssuesRendered === "function") {
        onAllIssuesRendered();
      }
    }
  }, [currentIndex, scanResult, totalIssues, onAllIssuesRendered]);

  useEffect(() => {
    if (scanResult?.scan?.issues?.length > 0) {
      setCurrentIndex(0);
    }
  }, [scanResult]);

  useEffect(() => {
    if (!loading) {
      const generatePDF = async () => {
        try {
          const applicationName = scanResult.scan.applicationName;

          // Generate PDF as blob
          const blob = await PDFGeneration(scanResult, applicationName);

          // Save PDF blob locally for download later
          setPdfName(`${applicationName}_Security_Assessment_Report.pdf`);
          setPdfBlob(blob);
          await uploadPDF(blob);
        } catch (error) {
          setPdfError("Error generating PDF: " + error.message);
        }
      };

      generatePDF();
    }
  }, [scanResult, loading, uploadPDF]);

  const handleDownloadPDF = useCallback(() => {
    if (!isPDFGenerated) {
      setShowOverlay(true);
      setPdfError("");
      setModalMessage("We are generating your PDF report, please wait...");

      setTimeout(() => {
        setModalMessage("Your PDF is ready for download.");
        setIsPDFGenerated(true);

        setTimeout(() => {
          setShowOverlay(false);
          if (pdfBlob) {
            const url = URL.createObjectURL(pdfBlob);
            const a = document.createElement("a");
            a.href = url;
            a.download = pdfName;
            document.body.appendChild(a);
            a.click();
            URL.revokeObjectURL(url);
          }
        }, 3000);
      }, 5000);
    } else {
      if (pdfBlob) {
        const url = URL.createObjectURL(pdfBlob);
        const a = document.createElement("a");
        a.href = url;
        a.download = pdfName;
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(url);
      }
    }
  }, [isPDFGenerated, pdfBlob, pdfName]);

  const sortedIssues = useMemo(() => {
    const severityOrder = [
      "Critical",
      "High",
      "Medium",
      "Low",
      "Info",
      "Errors",
    ];

    return [...renderedIssues].sort(
      (a, b) =>
        severityOrder.indexOf(a.Severity) - severityOrder.indexOf(b.Severity)
    );
  }, [renderedIssues]);

  return (
    <>
      <Row className={classes.reportRow}>
        <style>{cssOverride}</style>
        <Col sm={12} md={12} lg={12}>
          <CardBox className={classes.issueCard}>
            <div
              className={`${classes.scanReportHeader} d-flex justify-content-between align-items-center`}
            >
              <h6 className={classes.scanReportTitle}>
                <strong>Findings and Observations</strong>
              </h6>

              <ButtonLayout
                className={classes.pdfBtn}
                onClick={handleDownloadPDF}
                disabled={!allIssuesRendered}
              >
                <FontAwesomeIcon icon={faFilePdf} className={classes.icon} />
                <span>Download PDF</span>
              </ButtonLayout>
            </div>

            {scanResult?.scan && (
              <Row>
                <Col sm={12} md={4} lg={3} className={`${classes.generatePDF}`}>
                  <ButtonLayout
                    className={classes.pdfBtn}
                    onClick={handleDownloadPDF}
                    disabled={!allIssuesRendered}
                  >
                    <FontAwesomeIcon
                      icon={faFilePdf}
                      className={classes.icon}
                    />
                    <span>Download PDF</span>
                  </ButtonLayout>
                </Col>
                <Col sm={12} md={12} lg={12}>
                  <Accordion alwaysOpen>
                    {sortedIssues.length > 0 ? (
                      sortedIssues.map((vulnerability, index) => (
                        <Accordion.Item
                          eventKey={index.toString()}
                          key={index}
                          className={`mb-3 ${classes.accordionItem}`}
                        >
                          <Accordion.Header
                            className={`${classes.accordionHeader} ${
                              !allIssuesRendered
                                ? classes.disabledAccordion
                                : ""
                            }`}
                            disabled={!allIssuesRendered}
                          >
                            {vulnerability.Vulnerability}
                          </Accordion.Header>
                          <Accordion.Body className={classes.accordionBody}>
                            <p>
                              <strong>Description: </strong>
                              {vulnerability.Description}
                            </p>
                            <p>
                              <strong>Severity: </strong>
                              <span
                                style={{
                                  color: severityStyles[vulnerability.Severity],
                                }}
                              >
                                <strong>{vulnerability.Severity}</strong>
                              </span>
                            </p>
                            <p>
                              <strong>Proof of Concept: </strong>
                            </p>
                            <pre
                              className={classes.preOutputContent}
                              style={{ whiteSpace: "pre-wrap" }}
                            >
                              {vulnerability.POC}
                            </pre>
                            <p>
                              <strong>Remediation: </strong>
                              {vulnerability.Remediation}
                            </p>
                            {vulnerability.Refer &&
                            Array.isArray(vulnerability.Refer) &&
                            vulnerability.Refer.length > 0 ? (
                              <>
                                <p>
                                  <strong>Refer: </strong>
                                </p>
                                <ul>
                                  {vulnerability.Refer.map(
                                    (reference, refIndex) => {
                                      const [url, ...titleParts] =
                                        reference.split(" - ");
                                      const title = titleParts.join(" - ");
                                      return (
                                        <li key={refIndex}>
                                          <a
                                            href={url}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                          >
                                            {title || url}
                                          </a>
                                        </li>
                                      );
                                    }
                                  )}
                                </ul>
                              </>
                            ) : (
                              <p>No references available.</p>
                            )}
                          </Accordion.Body>
                        </Accordion.Item>
                      ))
                    ) : (
                      <p className="text-center">No vulnerabilities found.</p>
                    )}
                  </Accordion>
                </Col>

                {loading && (
                  <div className="text-center mt-3 mb-3">
                    <Spinner
                      animation="grow"
                      role="status"
                      className={classes.loadingSpinner}
                    />
                    <p className="text-center">
                      Identifying issues... Once complete, you can view the full
                      report.
                    </p>
                  </div>
                )}
              </Row>
            )}

            {scanResult?.error && (
              <Alert variant="danger" className="text-danger">
                {scanResult.error}
              </Alert>
            )}

            {pdfError && (
              <Alert variant="danger" className="text-danger">
                {pdfError}
              </Alert>
            )}
          </CardBox>
        </Col>
      </Row>
      <ModalOverlay
        show={showOverlay}
        onHide={() => setShowOverlay(false)}
        message={modalMessage}
      />
    </>
  );
};

export default Result;
