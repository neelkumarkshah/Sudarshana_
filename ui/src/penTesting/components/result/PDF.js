import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

import logo from "../../../shared/assets/images/sudarshanaLogo.png";
import AssessmentMethodsData from "./AssessmentMethodsData.json";

const PDFGeneration = (scanResult) => {
  return new Promise(async (resolve) => {
    const doc = new jsPDF();

    const pageNumbers = [];
    const issuePageNumbers = [];
    let detailedObservationPage = null;
    const scanType = scanResult.scan.scanType;
    const applicationName = scanResult.scan.applicationName;
    const url = scanResult.scan.targetedUrl;
    const date = scanResult.scan.timestamp;

    const createTitlePage = () => {
      doc.setFillColor("#ffffff");
      doc.rect(
        0,
        0,
        doc.internal.pageSize.width,
        doc.internal.pageSize.height,
        "F"
      );

      const logoWidth = 120;
      const logoHeight = 16;
      const pageWidth = doc.internal.pageSize.width;
      const horizontallyCenter = (pageWidth - logoWidth) / 2;

      doc.addImage(logo, "PNG", horizontallyCenter, 40, logoWidth, logoHeight);

      const firstRectWidth = 140;
      const firstRectX = (pageWidth - firstRectWidth) / 2;
      doc.setFillColor("#f4f4f4");
      doc.roundedRect(firstRectX - 5, 150, firstRectWidth, 50, 5, 5, "F");

      const secondRectWidth = 140;
      const secondRectX = (pageWidth - secondRectWidth) / 2;
      doc.setFillColor("#1c3144");
      doc.roundedRect(secondRectX + 5, 160, secondRectWidth, 50, 5, 5, "F");

      doc.setFont("times", "bold");
      doc.setFontSize(20);
      doc.setTextColor("#f4f4f4");
      doc.text("Security Assessment Report", secondRectX + 135, 170, {
        align: "right",
      });

      doc.setFont("times", "italic");
      doc.setFontSize(14);
      doc.text("Automated Scan", secondRectX + 135, 180, {
        align: "right",
      });

      const options = {
        day: "2-digit",
        month: "short",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: true,
      };

      const formattedDate = new Date(date).toLocaleDateString("en-IN", options);
      const dateOfScan =
        formattedDate.replace(/am|pm/i, (match) => match.toUpperCase()) +
        " IST";

      doc.setFont("times", "bold");
      doc.setFontSize(12);
      doc.setTextColor("#f4f4f4");
      doc.text(`${dateOfScan}`, secondRectX + 135, 205, { align: "right" });

      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createTableOfContentsPage = () => {
      doc.addPage();
      header();

      doc.setFont("times", "bold");
      doc.setFontSize(20);
      doc.setTextColor("#1c3144");
      doc.text("Table of Contents", 10, 30);

      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createSummaryPage = () => {
      const pageWidth = doc.internal.pageSize.width;
      const margin = 10;
      let dynamicYPosition = 25;

      doc.addPage();
      header();

      const containerWidth = pageWidth - margin * 2;
      // const containerHeight = 60;
      // doc.setDrawColor("#1c3144");
      // doc.setLineWidth(0.5);
      // doc.roundedRect(
      //   margin,
      //   dynamicYPosition,
      //   containerWidth,
      //   containerHeight,
      //   6,
      //   6
      // );

      doc.setFillColor("#1c3144");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");

      // Title text
      doc.setTextColor("#ffffff");
      doc.setFont("times", "bold");
      doc.setFontSize(16);
      doc.text("Overall Summary", pageWidth / 2, dynamicYPosition + 8, {
        align: "center",
      });

      dynamicYPosition += 25;

      // Assessment Details
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Assessment Details", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 10;

      const headerStyles = {
        font: "times",
        fontStyle: "bold",
        fillColor: "#1c3144",
        fontSize: 12,
        halign: "center",
        valign: "middle",
      };

      const bodyStyles = {
        font: "times",
        fontSize: 12,
        halign: "center",
        valign: "middle",
      };

      const scopeData = [
        {
          scanType,
          applicationName,
          url,
        },
      ];

      autoTable(doc, {
        head: [["Type of Scan", "Name of Application", "URL"]],
        body: scopeData.map((item) => [
          item.scanType,
          item.applicationName,
          item.url,
        ]),
        startY: dynamicYPosition,
        headStyles: headerStyles,
        styles: bodyStyles,
        theme: "striped",
      });

      dynamicYPosition = doc.lastAutoTable.finalY + 15;

      // Assessment Methodologies
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Assessment Methodologies", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 10;

      const methodology =
        AssessmentMethodsData["Web Application Security Assessment"];
      const lineSpacing = 7;

      // Purpose
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(12);
      doc.setTextColor("#1c3144");
      doc.text("Purpose", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const purposeLines = doc.splitTextToSize(
        methodology.purpose,
        pageWidth - 2 * margin
      );
      doc.text(purposeLines, margin, dynamicYPosition);
      dynamicYPosition += purposeLines.length * lineSpacing + 5;

      // Scope
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setTextColor("#1c3144");
      doc.text("Scope", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const projectScopeLines = doc.splitTextToSize(
        methodology.scope,
        pageWidth - 2 * margin
      );
      doc.text(projectScopeLines, margin, dynamicYPosition);
      dynamicYPosition += projectScopeLines.length * lineSpacing + 5;

      // Methodologies
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setTextColor("#1c3144");
      doc.text("Methodologies", margin, dynamicYPosition, {
        align: "center",
      });
      dynamicYPosition += 7;
      doc.setFont("times", "normal");
      doc.setTextColor("#000000");
      const methodologiesLines = doc.splitTextToSize(
        methodology.methodologies,
        pageWidth - 2 * margin
      );
      doc.text(methodologiesLines, margin, dynamicYPosition);
      dynamicYPosition += methodologiesLines.length * lineSpacing + 15;

      // Threats Summary
      doc.setFillColor("#f4f4f4");
      doc.rect(margin, dynamicYPosition, containerWidth, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor("#1c3144");
      doc.text("Threats Summary", margin, dynamicYPosition, {
        align: "center",
      });

      const severityTableHeaders = [
        "Severity",
        "Critical",
        "High",
        "Medium",
        "Low",
        "Info",
        "Errors",
      ];
      const severityCounts = severityTableHeaders.reduce((acc, s) => {
        acc[s] = 0;
        return acc;
      }, {});

      scanResult?.scan?.issues.forEach((issue) => {
        severityCounts[issue.Severity] =
          (severityCounts[issue.Severity] || 0) + 1;
      });

      const totalIssues = scanResult?.scan?.issues.length || 0;

      const severityHeaderRow = severityTableHeaders
        .concat(["Total Issues"])
        .map((header) => ({
          content: header,
          styles: { textColor: "#FFFFFF", fillColor: "#1c3144" },
        }));

      const severityStyles = {
        Critical: "#B80000",
        High: "#FF1F1F",
        Medium: "#EB701E",
        Low: "#FFDD33",
        Info: "#7AB851",
        Errors: "#860909",
      };

      const severityCountRow = severityTableHeaders.map((severity) => ({
        content:
          severity === "Severity"
            ? "Number of Threats"
            : severityCounts[severity],
        styles: {
          textColor:
            severity === "Severity"
              ? "#1c3144"
              : severityStyles[severity] || "#1c3144",
        },
      }));

      severityCountRow.push({
        content: totalIssues,
        styles: { textColor: "#1c3144" },
      });

      autoTable(doc, {
        head: [severityHeaderRow],
        body: [severityCountRow],
        startY: dynamicYPosition + 5,
        headStyles: headerStyles,
        styles: bodyStyles,
      });

      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const createIdentifiedIssuesPages = () => {
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 10;
      const totalBoxWidth = 15 + 145 + 30;
      const boxHeight = 10;
      const headerHeight = 20;
      const footerHeight = 20;

      const severityStyles = {
        Critical: "#B80000",
        High: "#FF1F1F",
        Medium: "#EB701E",
        Low: "#FFDD33",
        Info: "#7AB851",
        Errors: "#860909",
      };

      const severityOrder = [
        "Critical",
        "High",
        "Medium",
        "Low",
        "Info",
        "Errors",
      ];

      const sortedIssues = scanResult?.scan?.issues.sort(
        (a, b) =>
          severityOrder.indexOf(a.Severity) - severityOrder.indexOf(b.Severity)
      );

      const availableHeight = pageHeight - (headerHeight + footerHeight);

      const addContentToNewPage = (dynamicYPosition, requiredSpace = 0) => {
        if (dynamicYPosition + requiredSpace > availableHeight) {
          footer(doc.internal.getNumberOfPages());
          doc.addPage();
          header();

          dynamicYPosition = headerHeight + 10;
        }
        return dynamicYPosition;
      };

      doc.addPage();
      header();
      let dynamicYPosition = 25;

      detailedObservationPage = doc.internal.getNumberOfPages();

      doc.setFillColor("#1c3144");
      doc.rect(margin, dynamicYPosition, pageWidth - margin * 2, 12, "F");
      doc.setFont("times", "bold");
      doc.setFontSize(16);
      doc.setTextColor("#ffffff");
      doc.text(
        "Detailed Observation of Identified Issues",
        pageWidth / 2,
        dynamicYPosition + 8,
        { align: "center" }
      );
      dynamicYPosition += 20;

      sortedIssues.forEach((issue, i) => {
        if (i > 0) {
          footer(doc.internal.getNumberOfPages());
          doc.addPage();
          header();
          dynamicYPosition = 25;
        }

        if (!issue) {
          const NoVul = "No Issues are found.";
          doc.setFont("times", "bolditalic");
          doc.setFontSize(24);
          doc.setTextColor("#1c3144");
          const textWidth = doc.getTextWidth(endOfReportText);
          const centerX = (pageWidth - textWidth) / 2;
          const centerY = pageHeight / 2;
          doc.text(NoVul, centerX, centerY);
        }

        const issueStartPage = doc.internal.getNumberOfPages();
        issuePageNumbers.push({
          name: issue.Vulnerability,
          pageNumber: issueStartPage,
        });

        const startingX = (pageWidth - totalBoxWidth) / 2;
        const issueBoxY = dynamicYPosition;

        const issueNumber = `0${i + 1}`.slice(-2);
        const issueNumberBoxWidth = 10;
        doc.setFillColor("#f4f4f4");
        doc.rect(startingX, issueBoxY, issueNumberBoxWidth, boxHeight, "F");
        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#1c3144");
        doc.text(
          issueNumber,
          startingX + issueNumberBoxWidth / 2,
          issueBoxY + boxHeight / 2 + 2,
          { align: "center" }
        );

        const vulnNameBoxWidth = 160;
        doc.rect(
          startingX + issueNumberBoxWidth,
          issueBoxY,
          vulnNameBoxWidth,
          boxHeight,
          "F"
        );
        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#ffffff");

        const vulnNameTextX =
          startingX + issueNumberBoxWidth + vulnNameBoxWidth / 2;
        const vulnNameTextY = issueBoxY + 1.8 + boxHeight / 2;
        doc.text(`${issue.Vulnerability}`, vulnNameTextX, vulnNameTextY, {
          align: "center",
        });

        const severityBoxWidth = 20;
        const severityColor = severityStyles[issue.Severity] || "#1c3144";
        doc.setFillColor("#f4f4f4");
        doc.rect(
          startingX + issueNumberBoxWidth + vulnNameBoxWidth,
          issueBoxY,
          severityBoxWidth,
          boxHeight,
          "F"
        );
        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor(severityColor);

        const severityTextX =
          startingX +
          issueNumberBoxWidth +
          vulnNameBoxWidth +
          severityBoxWidth / 2;
        const severityTextY = issueBoxY + 1.8 + boxHeight / 2;
        doc.text(`${issue.Severity}`, severityTextX, severityTextY, {
          align: "center",
        });

        dynamicYPosition += boxHeight + 10;

        const titleSpace = 8;

        const descriptionLines = doc.splitTextToSize(issue.Description, 225);
        let totalLength = titleSpace + descriptionLines;
        dynamicYPosition = addContentToNewPage(dynamicYPosition, totalLength);
        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#1c3144");
        doc.text("Description", margin, dynamicYPosition);
        dynamicYPosition += 8;
        descriptionLines.forEach((line) => {
          dynamicYPosition = addContentToNewPage(dynamicYPosition, 10);
          doc.setFont("times", "normal");
          doc.setFontSize(12);
          doc.setTextColor("#000000");
          doc.text(line, margin, dynamicYPosition);
          dynamicYPosition += 7;
        });

        const pocLines = doc.splitTextToSize(issue.POC, 185);
        totalLength = titleSpace + pocLines;
        dynamicYPosition = addContentToNewPage(dynamicYPosition, totalLength);
        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#1c3144");
        dynamicYPosition += 8;
        doc.text("Proof of Concept", margin, dynamicYPosition);

        dynamicYPosition += 8;

        pocLines.forEach((line) => {
          dynamicYPosition = addContentToNewPage(dynamicYPosition, 10);
          doc.setFont("times", "normal");
          doc.setFontSize(12);
          doc.setTextColor("#000000");

          doc.text(line, margin, dynamicYPosition);
          dynamicYPosition += 7;
        });

        const remediationLines = doc.splitTextToSize(issue.Remediation, 185);
        dynamicYPosition = addContentToNewPage(dynamicYPosition, totalLength);

        doc.setFont("times", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#1c3144");
        dynamicYPosition += 8;
        doc.text("Remediation", margin, dynamicYPosition);

        dynamicYPosition += 8;

        remediationLines.forEach((line) => {
          dynamicYPosition = addContentToNewPage(dynamicYPosition);
          doc.setFont("times", "normal");
          doc.setFontSize(12);
          doc.setTextColor("#000000");
          doc.text(line, margin, dynamicYPosition);
          dynamicYPosition += 7;
        });

        const renderReferences = (references) => {
          dynamicYPosition = addContentToNewPage(dynamicYPosition, 8);
          doc.setFont("times", "bold");
          doc.setFontSize(14);
          doc.setTextColor("#1c3144");
          dynamicYPosition += 8;
          doc.text("Refer", margin, dynamicYPosition);

          dynamicYPosition += 8;

          references.forEach((ref, index) => {
            dynamicYPosition = addContentToNewPage(dynamicYPosition, 5);

            doc.setFont("times", "normal");
            doc.setFontSize(12);
            doc.setTextColor("#547FC9");
            const bulletPoint = `${index + 1}. ${ref}`;
            const refLines = doc.splitTextToSize(bulletPoint, 185);

            refLines.forEach((line) => {
              dynamicYPosition = addContentToNewPage(dynamicYPosition, 5);
              doc.setFontSize(12);
              doc.setTextColor("#547FC9");
              doc.text(line, margin, dynamicYPosition);
              dynamicYPosition += 5;
            });

            dynamicYPosition += 3;
          });

          dynamicYPosition += 8;
        };

        const references = Array.isArray(issue.Refer)
          ? issue.Refer
          : ["No reference available"];
        renderReferences(references);

        // issuePageNumbers.push({
        //   name: issue.Vulnerability,
        //   pageNumber: doc.internal.getNumberOfPages(),
        // });

        pageNumbers.push(doc.internal.getNumberOfPages());
      });

      doc.addPage();
      header();
      footer(doc.internal.getNumberOfPages());
      const endOfReportText = "End of Report";
      doc.setFont("times", "bolditalic");
      doc.setFontSize(24);
      doc.setTextColor("#1c3144");
      const textWidth = doc.getTextWidth(endOfReportText);
      const centerX = (pageWidth - textWidth) / 2;
      const centerY = pageHeight / 2;
      doc.text(endOfReportText, centerX, centerY);
      pageNumbers.push(doc.internal.getNumberOfPages());
    };

    const updateTableOfContentsPage = () => {
      const margin = 10;
      const pageWidth = doc.internal.pageSize.width;
      const pageMargin = 10;
      let currentIndex = 1;

      const addToCEntry = (label, pageNum, yPos, indent = 0) => {
        const labelWidth = doc.getTextWidth(label);
        const pageNumberWidth = doc.getTextWidth(String(pageNum));
        const totalWidth = labelWidth + pageNumberWidth;
        const availableSpace = pageWidth - pageMargin - 14;

        const dotsWidth = doc.getTextWidth(".");
        const dotsCount = Math.floor((availableSpace - totalWidth) / dotsWidth);
        const dots = ".".repeat(dotsCount);

        doc.text(`${" ".repeat(indent)}${label} ${dots} `, margin, yPos);
        doc.text(
          String(pageNum),
          pageWidth - pageNumberWidth - pageMargin,
          yPos
        );
      };

      doc.setPage(pageNumbers[1]);

      doc.setFont("times", "normal");
      doc.setTextColor("#1c3144");
      doc.setFontSize(12);

      let yPos = 40;

      addToCEntry(`${currentIndex}. Overall Summary`, pageNumbers[2], yPos);
      yPos += 10;
      currentIndex++;

      addToCEntry(
        `${currentIndex}. Detailed Observation of Identified Issues`,
        detailedObservationPage,
        yPos
      );

      yPos += 10;

      const subHeadingIndex = currentIndex;

      issuePageNumbers.forEach((issue, index) => {
        const issueIndex = `${subHeadingIndex}.${index + 1}`;
        addToCEntry(`${issueIndex} ${issue.name}`, issue.pageNumber, yPos, 2);
        yPos += 10;
      });
    };

    const header = () => {
      doc.setFillColor("#f4f4f4");
      doc.rect(0, 0, doc.internal.pageSize.width, 20, "F");
      const logoWidth = 55;
      const logoHeight = 7.5;
      const x = (doc.internal.pageSize.width - logoWidth) / 2;
      doc.addImage(logo, "PNG", x, 6.6, logoWidth, logoHeight);
    };

    const footer = (pageNumber) => {
      if (pageNumber === 1) return;

      doc.setFillColor("#f4f4f4");
      doc.setTextColor("#1c3144");
      doc.setFontSize(10);
      doc.setFont("times", "bold");
      doc.rect(
        0,
        doc.internal.pageSize.height - 20,
        doc.internal.pageSize.width,
        20,
        "F"
      );

      const totalPages = doc.internal.getNumberOfPages();
      const pageText = `Page ${pageNumber} of ${totalPages}`;

      const textWidth = doc.getTextWidth(pageText);
      const x = doc.internal.pageSize.width - textWidth - 10;

      const y = doc.internal.pageSize.height - 8.5;
      doc.text(pageText, x, y);
    };

    createTitlePage();
    createTableOfContentsPage();
    createSummaryPage();
    createIdentifiedIssuesPages();

    updateTableOfContentsPage();

    for (let i = 0; i < pageNumbers.length; i++) {
      doc.setPage(pageNumbers[i]);
      footer(pageNumbers[i]);
    }

    const pdfBlob = doc.output("blob");

    resolve(pdfBlob);
  });
};

export default PDFGeneration;
