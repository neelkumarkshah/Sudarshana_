import React, { useState } from "react";
import { Form, Row, Col, FloatingLabel } from "react-bootstrap";
import InputGroup from "react-bootstrap/InputGroup";
import { faShieldAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import Card from "../../../shared/components/uiElements/card/Card";
import ButtonLayout from "../../../shared/components/uiElements/button/Button";
import classes from "./PentestForm.module.css";

const cssOverride = `
    @media (max-width: 576px) {
      .input-group-text {
        font-size: 0.7rem !important;
        display: none !important;
      }
    }

    @media (max-width: 768px) {
      .input-group-text {
        font-size: 0.85rem !important;
      }
    }
  `;

const PenTestForm = ({
  onScanResult,
  formEnabled,
  handleStartScan,
  resetAll,
  scanStarted,
  allIssuesRendered,
  setMessage,
}) => {
  const [isFormDisabled, setIsFormDisabled] = useState(!formEnabled);
  const [formFields, setFormFields] = useState({
    url: "",
    applicationName: "",
    scanType: "default",
  });

  const startPenTestHandler = async (event) => {
    event.preventDefault();
    onScanResult(null);

    if (
      !formFields.url ||
      !formFields.applicationName ||
      formFields.scanType === "default"
    ) {
      setMessage({
        type: "danger",
        text: "All fields are required. Please fill out all details.",
      });
      return;
    }

    handleStartScan();

    try {
      const response = await window.api.invoke("startScan", {
        url: formFields.url,
        applicationName: formFields.applicationName,
        scanType: formFields.scanType,
      });

      if (response?.success) {
        onScanResult(response.data);
      } else {
        onScanResult({ error: response?.message || "Scan failed." });
        setMessage({
          type: "danger",
          text: response?.message || "Scan failed.",
        });
      }
    } catch (err) {
      onScanResult({ error: err.message });
      setMessage({ type: "danger", text: `Unexpected error: ${err.message}` });
    } finally {
      setIsFormDisabled(true);
    }
  };

  const newScan = () => resetAll();

  return (
    <>
      <style>{cssOverride}</style>
      <Card>
        <Row className="align-items-center">
          <Col sm={12} md={12} lg={12}>
            <Form onSubmit={startPenTestHandler}>
              <Form.Group>
                <Row>
                  <Col sm={12} md={12} lg={6}>
                    <InputGroup>
                      <InputGroup.Text id="basic-addon3">
                        http:// or https://example.com
                      </InputGroup.Text>
                      <Form.Control
                        id="basic-url"
                        className={classes.inputForm}
                        aria-describedby="basic-addon3"
                        type="text"
                        placeholder="Enter your URL or IP"
                        value={formFields.url}
                        onChange={(e) =>
                          setFormFields({ ...formFields, url: e.target.value })
                        }
                        disabled={isFormDisabled}
                        required
                      />
                    </InputGroup>
                  </Col>

                  <Col sm={12} md={6} lg={3}>
                    <FloatingLabel
                      controlId="floatingInputGrid"
                      label="Application Name"
                      className={`${classes.applicationName}`}
                    >
                      <Form.Control
                        type="text"
                        placeholder="Application Name"
                        className={classes.inputForm}
                        value={formFields.applicationName}
                        onChange={(e) =>
                          setFormFields({
                            ...formFields,
                            applicationName: e.target.value,
                          })
                        }
                        disabled={isFormDisabled}
                        required
                      />
                    </FloatingLabel>
                  </Col>

                  <Col sm={12} md={6} lg={3}>
                    <FloatingLabel
                      controlId="floatingSelectGrid"
                      label="Type of Scan"
                      className={`${classes.typeScanBtn}`}
                    >
                      <Form.Select
                        aria-label="Type of Scan"
                        value={formFields.scanType}
                        className={classes.inputForm}
                        onChange={(e) =>
                          setFormFields({
                            ...formFields,
                            scanType: e.target.value,
                          })
                        }
                        disabled={isFormDisabled}
                        required
                      >
                        <option value="default">Select Scan Type</option>
                        <option value="Web Application">Web Application</option>
                        <option value="API">API</option>
                      </Form.Select>
                    </FloatingLabel>
                  </Col>
                </Row>

                <Row className="mt-3 justify-content-center">
                  <Col sm={12} md={8} className="d-flex justify-content-center">
                    <ButtonLayout
                      type="submit"
                      className={classes.ScanBtn}
                      disabled={isFormDisabled}
                    >
                      <FontAwesomeIcon
                        icon={faShieldAlt}
                        className={classes.icon}
                      />
                      <span>Start Scan</span>
                    </ButtonLayout>
                  </Col>
                  <Col sm={12} md={4} className="d-flex justify-content-center">
                    <ButtonLayout
                      type="button"
                      onClick={newScan}
                      className={classes.newScan}
                      disabled={!allIssuesRendered}
                    >
                      <FontAwesomeIcon
                        icon={faShieldAlt}
                        className={classes.icon}
                      />
                      <span>Start New Scan</span>
                    </ButtonLayout>
                  </Col>
                </Row>
              </Form.Group>
            </Form>
          </Col>
        </Row>
      </Card>
    </>
  );
};

export default PenTestForm;
